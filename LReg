{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>YearsExperience</th>\n",
       "      <th>Salary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.1</td>\n",
       "      <td>39343.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.3</td>\n",
       "      <td>46205.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.5</td>\n",
       "      <td>37731.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.0</td>\n",
       "      <td>43525.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.2</td>\n",
       "      <td>39891.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   YearsExperience   Salary\n",
       "0              1.1  39343.0\n",
       "1              1.3  46205.0\n",
       "2              1.5  37731.0\n",
       "3              2.0  43525.0\n",
       "4              2.2  39891.0"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "salary_data = pd.read_csv(\"Salary_Data.csv\")\n",
    "salary_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(30, 2)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "salary_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Salary')"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# scatter plot\n",
    "plt.scatter(salary_data.iloc[:,0],salary_data.iloc[:,1])\n",
    "plt.xlabel(\"Years of experience\")\n",
    "plt.ylabel(\"Salary\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/lakshmipriya/opt/anaconda3/lib/python3.8/site-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='Density'>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#distplot\n",
    "sns.distplot(salary_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/lakshmipriya/opt/anaconda3/lib/python3.8/site-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='YearsExperience', ylabel='Density'>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(salary_data.iloc[:,0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/lakshmipriya/opt/anaconda3/lib/python3.8/site-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Salary', ylabel='Density'>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(salary_data.iloc[:,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='YearsExperience', ylabel='Salary'>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#regplot\n",
    "sns.regplot(x=\"YearsExperience\",y=\"Salary\",data=salary_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'whiskers': [<matplotlib.lines.Line2D at 0x118eb64f0>,\n",
       "  <matplotlib.lines.Line2D at 0x118eb66d0>],\n",
       " 'caps': [<matplotlib.lines.Line2D at 0x118eb6a60>,\n",
       "  <matplotlib.lines.Line2D at 0x118eb6dc0>],\n",
       " 'boxes': [<matplotlib.lines.Line2D at 0x118eb6190>],\n",
       " 'medians': [<matplotlib.lines.Line2D at 0x118ec2160>],\n",
       " 'fliers': [<matplotlib.lines.Line2D at 0x118ec24c0>],\n",
       " 'means': []}"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#boxplot\n",
    "plt.boxplot(salary_data.YearsExperience)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'whiskers': [<matplotlib.lines.Line2D at 0x118fa6250>,\n",
       "  <matplotlib.lines.Line2D at 0x118fa65b0>],\n",
       " 'caps': [<matplotlib.lines.Line2D at 0x118fa6910>,\n",
       "  <matplotlib.lines.Line2D at 0x118fa6c70>],\n",
       " 'boxes': [<matplotlib.lines.Line2D at 0x118f97eb0>],\n",
       " 'medians': [<matplotlib.lines.Line2D at 0x118fa6fd0>],\n",
       " 'fliers': [<matplotlib.lines.Line2D at 0x118faf370>],\n",
       " 'means': []}"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.boxplot(salary_data.Salary)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>YearsExperience</th>\n",
       "      <th>Salary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>YearsExperience</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.978242</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Salary</th>\n",
       "      <td>0.978242</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 YearsExperience    Salary\n",
       "YearsExperience         1.000000  0.978242\n",
       "Salary                  0.978242  1.000000"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#correlation of all variables in salary_data\n",
    "salary_data.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>         <td>Salary</td>      <th>  R-squared:         </th> <td>   0.957</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.955</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   622.5</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Sun, 23 May 2021</td> <th>  Prob (F-statistic):</th> <td>1.14e-20</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>22:53:00</td>     <th>  Log-Likelihood:    </th> <td> -301.44</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>    30</td>      <th>  AIC:               </th> <td>   606.9</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>    28</td>      <th>  BIC:               </th> <td>   609.7</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "         <td></td>            <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>       <td> 2.579e+04</td> <td> 2273.053</td> <td>   11.347</td> <td> 0.000</td> <td> 2.11e+04</td> <td> 3.04e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>YearsExperience</th> <td> 9449.9623</td> <td>  378.755</td> <td>   24.950</td> <td> 0.000</td> <td> 8674.119</td> <td> 1.02e+04</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 2.140</td> <th>  Durbin-Watson:     </th> <td>   1.648</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.343</td> <th>  Jarque-Bera (JB):  </th> <td>   1.569</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.363</td> <th>  Prob(JB):          </th> <td>   0.456</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 2.147</td> <th>  Cond. No.          </th> <td>    13.2</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                 Salary   R-squared:                       0.957\n",
       "Model:                            OLS   Adj. R-squared:                  0.955\n",
       "Method:                 Least Squares   F-statistic:                     622.5\n",
       "Date:                Sun, 23 May 2021   Prob (F-statistic):           1.14e-20\n",
       "Time:                        22:53:00   Log-Likelihood:                -301.44\n",
       "No. Observations:                  30   AIC:                             606.9\n",
       "Df Residuals:                      28   BIC:                             609.7\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "===================================================================================\n",
       "                      coef    std err          t      P>|t|      [0.025      0.975]\n",
       "-----------------------------------------------------------------------------------\n",
       "Intercept        2.579e+04   2273.053     11.347      0.000    2.11e+04    3.04e+04\n",
       "YearsExperience  9449.9623    378.755     24.950      0.000    8674.119    1.02e+04\n",
       "==============================================================================\n",
       "Omnibus:                        2.140   Durbin-Watson:                   1.648\n",
       "Prob(Omnibus):                  0.343   Jarque-Bera (JB):                1.569\n",
       "Skew:                           0.363   Prob(JB):                        0.456\n",
       "Kurtosis:                       2.147   Cond. No.                         13.2\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# simple linear regression -> y = mx + c\n",
    "# dependent variable - salary and independent variable - years of experience\n",
    "\n",
    "import statsmodels.formula.api as smf\n",
    "\n",
    "model1 = smf.ols(\"Salary~YearsExperience\",data = salary_data).fit()\n",
    "model1.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Intercept          25792.200199\n",
       "YearsExperience     9449.962321\n",
       "dtype: float64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model1.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.54520896,  1.40418217, -0.38632031, -0.20163464, -1.15596979,\n",
       "        0.59514885,  1.03793812, -0.27418681,  1.45343166, -0.61642477,\n",
       "        0.09863781, -1.34720543, -1.1462834 , -1.28812023, -1.24492716,\n",
       "       -0.71851921, -1.37484017,  1.24578559, -0.03178436,  1.9777821 ,\n",
       "        0.29128615,  0.93050694,  0.14772822,  1.81920104,  0.24603492,\n",
       "       -0.90870332,  0.24223936, -0.66976978, -0.12712026, -0.54330225])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model1.resid\n",
    "model1.resid_pearson"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Intercept</th>\n",
       "      <td>21136.061314</td>\n",
       "      <td>30448.339084</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>YearsExperience</th>\n",
       "      <td>8674.118747</td>\n",
       "      <td>10225.805896</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            0             1\n",
       "Intercept        21136.061314  30448.339084\n",
       "YearsExperience   8674.118747  10225.805896"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model1.conf_int(0.05)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      36187.158752\n",
       "1      38077.151217\n",
       "2      39967.143681\n",
       "3      44692.124842\n",
       "4      46582.117306\n",
       "5      53197.090931\n",
       "6      54142.087163\n",
       "7      56032.079627\n",
       "8      56032.079627\n",
       "9      60757.060788\n",
       "10     62647.053252\n",
       "11     63592.049484\n",
       "12     63592.049484\n",
       "13     64537.045717\n",
       "14     68317.030645\n",
       "15     72097.015574\n",
       "16     73987.008038\n",
       "17     75877.000502\n",
       "18     81546.977895\n",
       "19     82491.974127\n",
       "20     90051.943985\n",
       "21     92886.932681\n",
       "22    100446.902538\n",
       "23    103281.891235\n",
       "24    108006.872395\n",
       "25    110841.861092\n",
       "26    115566.842252\n",
       "27    116511.838485\n",
       "28    123126.812110\n",
       "29    125016.804574\n",
       "dtype: float64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predict1 = model1.predict(salary_data[\"YearsExperience\"])\n",
    "predict1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5592.043608760662"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rmse_lin1 = np.sqrt(np.mean((np.array(salary_data.Salary)-np.array(predict1))**2))\n",
    "rmse_lin1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Salary')"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x=salary_data['YearsExperience'],y=salary_data['Salary'],color='red')\n",
    "plt.plot(salary_data['YearsExperience'],predict1,color='black')\n",
    "plt.xlabel('Years of Experience')\n",
    "plt.ylabel('Salary')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9782416184887601"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr1 = predict1.corr(salary_data.Salary)\n",
    "corr1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Standardized residual')"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(model1.resid_pearson,'o')\n",
    "plt.axhline(y=0,color='green')\n",
    "plt.xlabel(\"observed number\")\n",
    "plt.ylabel(\"Standardized residual\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9554194021486339"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model1.rsquared_adj"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Intercept                  14927.97177\n",
       "np.log(YearsExperience)    40581.98796\n",
       "dtype: float64"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#model2\n",
    "import statsmodels.formula.api as smf\n",
    "model2 = smf.ols('Salary~np.log(YearsExperience)',data=salary_data).fit()\n",
    "model2.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>         <td>Salary</td>      <th>  R-squared:         </th> <td>   0.854</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.849</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   163.6</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Sun, 23 May 2021</td> <th>  Prob (F-statistic):</th> <td>3.25e-13</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>22:54:08</td>     <th>  Log-Likelihood:    </th> <td> -319.77</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>    30</td>      <th>  AIC:               </th> <td>   643.5</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>    28</td>      <th>  BIC:               </th> <td>   646.3</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "             <td></td>                <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>               <td> 1.493e+04</td> <td> 5156.226</td> <td>    2.895</td> <td> 0.007</td> <td> 4365.921</td> <td> 2.55e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>np.log(YearsExperience)</th> <td> 4.058e+04</td> <td> 3172.453</td> <td>   12.792</td> <td> 0.000</td> <td> 3.41e+04</td> <td> 4.71e+04</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 1.094</td> <th>  Durbin-Watson:     </th> <td>   0.512</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.579</td> <th>  Jarque-Bera (JB):  </th> <td>   0.908</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.156</td> <th>  Prob(JB):          </th> <td>   0.635</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 2.207</td> <th>  Cond. No.          </th> <td>    5.76</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                 Salary   R-squared:                       0.854\n",
       "Model:                            OLS   Adj. R-squared:                  0.849\n",
       "Method:                 Least Squares   F-statistic:                     163.6\n",
       "Date:                Sun, 23 May 2021   Prob (F-statistic):           3.25e-13\n",
       "Time:                        22:54:08   Log-Likelihood:                -319.77\n",
       "No. Observations:                  30   AIC:                             643.5\n",
       "Df Residuals:                      28   BIC:                             646.3\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "===========================================================================================\n",
       "                              coef    std err          t      P>|t|      [0.025      0.975]\n",
       "-------------------------------------------------------------------------------------------\n",
       "Intercept                1.493e+04   5156.226      2.895      0.007    4365.921    2.55e+04\n",
       "np.log(YearsExperience)  4.058e+04   3172.453     12.792      0.000    3.41e+04    4.71e+04\n",
       "==============================================================================\n",
       "Omnibus:                        1.094   Durbin-Watson:                   0.512\n",
       "Prob(Omnibus):                  0.579   Jarque-Bera (JB):                0.908\n",
       "Skew:                           0.156   Prob(JB):                        0.635\n",
       "Kurtosis:                       2.207   Cond. No.                         5.76\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model2.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Intercept</th>\n",
       "      <td>4365.921305</td>\n",
       "      <td>25490.022235</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>np.log(YearsExperience)</th>\n",
       "      <td>34083.511736</td>\n",
       "      <td>47080.464184</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                    0             1\n",
       "Intercept                 4365.921305  25490.022235\n",
       "np.log(YearsExperience)  34083.511736  47080.464184"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model2.conf_int(0.05)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 1.92668535,  1.9344319 ,  0.59528747,  0.04385928, -0.65958399,\n",
       "       -0.14009554,  0.05983938, -0.72070308,  0.21698667, -1.01586668,\n",
       "       -0.65086038, -1.4433439 , -1.33429059, -1.41662681, -1.39297775,\n",
       "       -1.07687064, -1.40810917,  0.04511883, -0.52473744,  0.5906383 ,\n",
       "       -0.09212822,  0.35636761,  0.23410631,  1.26532617,  0.62929102,\n",
       "        0.1393676 ,  1.00137122,  0.55512972,  1.20211758,  1.08026978])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model2.resid\n",
    "model2.resid_pearson"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      36187.158752\n",
       "1      38077.151217\n",
       "2      39967.143681\n",
       "3      44692.124842\n",
       "4      46582.117306\n",
       "5      53197.090931\n",
       "6      54142.087163\n",
       "7      56032.079627\n",
       "8      56032.079627\n",
       "9      60757.060788\n",
       "10     62647.053252\n",
       "11     63592.049484\n",
       "12     63592.049484\n",
       "13     64537.045717\n",
       "14     68317.030645\n",
       "15     72097.015574\n",
       "16     73987.008038\n",
       "17     75877.000502\n",
       "18     81546.977895\n",
       "19     82491.974127\n",
       "20     90051.943985\n",
       "21     92886.932681\n",
       "22    100446.902538\n",
       "23    103281.891235\n",
       "24    108006.872395\n",
       "25    110841.861092\n",
       "26    115566.842252\n",
       "27    116511.838485\n",
       "28    123126.812110\n",
       "29    125016.804574\n",
       "dtype: float64"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predict2 = model1.predict(salary_data.iloc[:,0])\n",
    "predict2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5592.043608760662"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rmse_lin2 = np.sqrt(np.mean((np.array(salary_data[\"Salary\"])-np.array(predict2))**2))\n",
    "rmse_lin2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Salary')"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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9GDt2rX06tWLQYMGUatWrXCEKFESsQTj7n8u5K12hRyfDBwyHcTd04EmBZTvIkhQBbw3BhhT7GBFpMQaxDZgffb6AsuL48cff+Suu+5izJgxnH322SxYsIC2bduGO0yJAu1FJiJH5WhuvvX6668THx/PuHHj6NevHxkZGUouFYgSjIgclZLcfOu7777j5ptv5o9//COnnHIKS5cuZdCgQdSsWbMUI5dI0w3HArrhmEjkuTsTJkygb9++7NixgwcffJB77rmH6tWrRzs0KaGibjhWVtbBiEgFl5WVxe23386sWbNo06YNqampNGrUKNphSQSpi0ykHCrsvihlUW5uLs899xyNGzdmwYIFPPPMMyxcuFDJpRJQC0aknInEwsZI+eKLL+jevTsLFy7k8ssvJyUlhbi4uGiHJaVELRiRciacCxsjZe/evQwePJhmzZqxYsUKXnzxRd566y0ll0pGLRiRciZcCxsjZfny5SQmJvLxxx9zww03MGLECOrWrRvtsCQK1IIRKWcKW8BY3IWNkbJr1y6SkpJISEjgm2++YcqUKbz66qtKLpWYEoxIOXM0CxuPVHEnEyxatIgWLVowcOBA/vrXv5KZmcmNN94Y9nikfFGCESlnSrKwsSTyJhOsz16P4/snE+RPMjt27KBPnz5cfPHF5OTkMHv2bMaOHUvt2rXDGouUT1poGdBCS5EDxT0VV+AeYw1jG7Ku7zrmzJlDjx49yMrKonfv3iQnJ2tzykpICy1F5IgVNmlg/eb13HrrrYwdO5ZzzjmHhQsXctFFF5VydFIeqItMRApU4KSBTKgysgovvfQS999/P8uXL1dykUIpwYhIgQ6YTLAdmARMhjPqnUF6ejrJyckce+yx0QxRyjglGBEpUOemnXmhwwvU+bwOjADWwJ/6/ok1n66hefPm0Q5PygGNwYhIgdatW8dL97zE1jlbufjiixk9ejTnnHNOtMOSckQtGBE5QG5uLs8++yxNmjRh0aJFjBgxgvfee0/JRY6YWjAist/q1avp3r07ixYton379jz//PM0bNgw2mFJOaUWjIiwZ88eBg4cSPPmzfnss88YP348M2fOVHKRo6IWjEgl9/HHH5OYmMjy5cvp2LEjzz77LKeeemq0w5IKQC0YkUpq586d9O/fn1atWvHtt9/y2muvMXnyZCUXCRu1YEQqoffff5/ExES+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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x=salary_data[\"YearsExperience\"],y=salary_data[\"Salary\"],color=\"green\")\n",
    "plt.plot(salary_data.YearsExperience,predict2,color='black')\n",
    "plt.xlabel('Years of experience')\n",
    "plt.ylabel('Salary')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9782416184887601"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr2 = predict2.corr(salary_data.Salary)\n",
    "corr2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Standard residual')"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(model2.resid_pearson,'o')\n",
    "plt.axhline(y=0,color='black')\n",
    "plt.xlabel(\"observed no.\")\n",
    "plt.ylabel(\"Standard residual\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Intercept          10.507402\n",
       "YearsExperience     0.125453\n",
       "dtype: float64"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#model 3\n",
    "import statsmodels.formula.api as smf\n",
    "model3 = smf.ols('np.log(Salary)~YearsExperience',data=salary_data).fit()\n",
    "model3.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>     <td>np.log(Salary)</td>  <th>  R-squared:         </th> <td>   0.932</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.930</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   383.6</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Sun, 23 May 2021</td> <th>  Prob (F-statistic):</th> <td>7.03e-18</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>22:54:14</td>     <th>  Log-Likelihood:    </th> <td>  28.183</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>    30</td>      <th>  AIC:               </th> <td>  -52.37</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>    28</td>      <th>  BIC:               </th> <td>  -49.56</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "         <td></td>            <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>       <td>   10.5074</td> <td>    0.038</td> <td>  273.327</td> <td> 0.000</td> <td>   10.429</td> <td>   10.586</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>YearsExperience</th> <td>    0.1255</td> <td>    0.006</td> <td>   19.585</td> <td> 0.000</td> <td>    0.112</td> <td>    0.139</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 0.826</td> <th>  Durbin-Watson:     </th> <td>   1.438</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.661</td> <th>  Jarque-Bera (JB):  </th> <td>   0.812</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.187</td> <th>  Prob(JB):          </th> <td>   0.666</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 2.286</td> <th>  Cond. No.          </th> <td>    13.2</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:         np.log(Salary)   R-squared:                       0.932\n",
       "Model:                            OLS   Adj. R-squared:                  0.930\n",
       "Method:                 Least Squares   F-statistic:                     383.6\n",
       "Date:                Sun, 23 May 2021   Prob (F-statistic):           7.03e-18\n",
       "Time:                        22:54:14   Log-Likelihood:                 28.183\n",
       "No. Observations:                  30   AIC:                            -52.37\n",
       "Df Residuals:                      28   BIC:                            -49.56\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "===================================================================================\n",
       "                      coef    std err          t      P>|t|      [0.025      0.975]\n",
       "-----------------------------------------------------------------------------------\n",
       "Intercept          10.5074      0.038    273.327      0.000      10.429      10.586\n",
       "YearsExperience     0.1255      0.006     19.585      0.000       0.112       0.139\n",
       "==============================================================================\n",
       "Omnibus:                        0.826   Durbin-Watson:                   1.438\n",
       "Prob(Omnibus):                  0.661   Jarque-Bera (JB):                0.812\n",
       "Skew:                           0.187   Prob(JB):                        0.666\n",
       "Kurtosis:                       2.286   Cond. No.                         13.2\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model3.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Intercept</th>\n",
       "      <td>10.428656</td>\n",
       "      <td>10.586148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>YearsExperience</th>\n",
       "      <td>0.112332</td>\n",
       "      <td>0.138574</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         0          1\n",
       "Intercept        10.428656  10.586148\n",
       "YearsExperience   0.112332   0.138574"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model3.conf_int(0.05)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      41998.957468\n",
       "1      43066.066794\n",
       "2      44160.289228\n",
       "3      47019.029189\n",
       "4      48213.688474\n",
       "5      52639.142472\n",
       "6      53303.675386\n",
       "7      54658.014935\n",
       "8      54658.014935\n",
       "9      58196.330788\n",
       "10     59674.982903\n",
       "11     60428.338456\n",
       "12     60428.338456\n",
       "13     61191.204604\n",
       "14     64340.199291\n",
       "15     67651.246149\n",
       "16     69370.128712\n",
       "17     71132.684635\n",
       "18     76693.630780\n",
       "19     77661.835040\n",
       "20     85860.704208\n",
       "21     89153.725393\n",
       "22     98565.809591\n",
       "23    102346.110512\n",
       "24    108971.540758\n",
       "25    113150.933364\n",
       "26    120475.819601\n",
       "27    121996.743836\n",
       "28    133194.621344\n",
       "29    136578.829694\n",
       "dtype: float64"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred_log=model3.predict(salary_data[\"YearsExperience\"])\n",
    "predict3 = np.exp(pred_log)\n",
    "predict3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7213.235076620129"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rmse_lin3 = np.sqrt(np.mean((np.array(salary_data[\"Salary\"])-np.array(predict3))**2))\n",
    "rmse_lin3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Salary')"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x=salary_data[\"YearsExperience\"],y=salary_data[\"Salary\"],color='black')\n",
    "plt.plot(salary_data[\"YearsExperience\"],predict3,color='red')\n",
    "plt.xlabel(\"Years of experience\")\n",
    "plt.ylabel(\"Salary\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9660469705377085"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr3 = salary_data[\"Salary\"].corr(predict3)\n",
    "corr3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Std residual')"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(model3.resid_pearson,'o')\n",
    "plt.axhline(y=0,color='red')\n",
    "plt.xlabel(\"Obs no.\")\n",
    "plt.ylabel(\"Std residual\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>YearsExperience</th>\n",
       "      <th>Salary</th>\n",
       "      <th>Years_sqr</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.1</td>\n",
       "      <td>39343.0</td>\n",
       "      <td>1.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.3</td>\n",
       "      <td>46205.0</td>\n",
       "      <td>1.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.5</td>\n",
       "      <td>37731.0</td>\n",
       "      <td>2.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.0</td>\n",
       "      <td>43525.0</td>\n",
       "      <td>4.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.2</td>\n",
       "      <td>39891.0</td>\n",
       "      <td>4.84</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   YearsExperience   Salary  Years_sqr\n",
       "0              1.1  39343.0       1.21\n",
       "1              1.3  46205.0       1.69\n",
       "2              1.5  37731.0       2.25\n",
       "3              2.0  43525.0       4.00\n",
       "4              2.2  39891.0       4.84"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import statsmodels.formula.api as smf\n",
    "\n",
    "salary_data[\"Years_sqr\"]=salary_data[\"YearsExperience\"]*salary_data[\"YearsExperience\"]\n",
    "salary_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<statsmodels.regression.linear_model.RegressionResultsWrapper at 0x119c48e80>"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_quad = smf.ols('np.log(Salary)~YearsExperience+Years_sqr',data=salary_data).fit()\n",
    "model_quad"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Intercept          10.336852\n",
       "YearsExperience     0.202382\n",
       "Years_sqr          -0.006614\n",
       "dtype: float64"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_quad.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Intercept</th>\n",
       "      <td>10.199456</td>\n",
       "      <td>10.474247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>YearsExperience</th>\n",
       "      <td>0.147751</td>\n",
       "      <td>0.257012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Years_sqr</th>\n",
       "      <td>-0.011202</td>\n",
       "      <td>-0.002025</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         0          1\n",
       "Intercept        10.199456  10.474247\n",
       "YearsExperience   0.147751   0.257012\n",
       "Years_sqr        -0.011202  -0.002025"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_quad.conf_int(0.05)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>     <td>np.log(Salary)</td>  <th>  R-squared:         </th> <td>   0.949</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.945</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   249.2</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Sun, 23 May 2021</td> <th>  Prob (F-statistic):</th> <td>3.95e-18</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>22:54:20</td>     <th>  Log-Likelihood:    </th> <td>  32.391</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>    30</td>      <th>  AIC:               </th> <td>  -58.78</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>    27</td>      <th>  BIC:               </th> <td>  -54.58</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     2</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "         <td></td>            <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>       <td>   10.3369</td> <td>    0.067</td> <td>  154.368</td> <td> 0.000</td> <td>   10.199</td> <td>   10.474</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>YearsExperience</th> <td>    0.2024</td> <td>    0.027</td> <td>    7.601</td> <td> 0.000</td> <td>    0.148</td> <td>    0.257</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Years_sqr</th>       <td>   -0.0066</td> <td>    0.002</td> <td>   -2.957</td> <td> 0.006</td> <td>   -0.011</td> <td>   -0.002</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 1.099</td> <th>  Durbin-Watson:     </th> <td>   1.845</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.577</td> <th>  Jarque-Bera (JB):  </th> <td>   1.002</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.260</td> <th>  Prob(JB):          </th> <td>   0.606</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 2.271</td> <th>  Cond. No.          </th> <td>    223.</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:         np.log(Salary)   R-squared:                       0.949\n",
       "Model:                            OLS   Adj. R-squared:                  0.945\n",
       "Method:                 Least Squares   F-statistic:                     249.2\n",
       "Date:                Sun, 23 May 2021   Prob (F-statistic):           3.95e-18\n",
       "Time:                        22:54:20   Log-Likelihood:                 32.391\n",
       "No. Observations:                  30   AIC:                            -58.78\n",
       "Df Residuals:                      27   BIC:                            -54.58\n",
       "Df Model:                           2                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "===================================================================================\n",
       "                      coef    std err          t      P>|t|      [0.025      0.975]\n",
       "-----------------------------------------------------------------------------------\n",
       "Intercept          10.3369      0.067    154.368      0.000      10.199      10.474\n",
       "YearsExperience     0.2024      0.027      7.601      0.000       0.148       0.257\n",
       "Years_sqr          -0.0066      0.002     -2.957      0.006      -0.011      -0.002\n",
       "==============================================================================\n",
       "Omnibus:                        1.099   Durbin-Watson:                   1.845\n",
       "Prob(Omnibus):                  0.577   Jarque-Bera (JB):                1.002\n",
       "Skew:                           0.260   Prob(JB):                        0.606\n",
       "Kurtosis:                       2.271   Cond. No.                         223.\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_quad.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      38233.559684\n",
       "1      39686.674746\n",
       "2      41173.227466\n",
       "3      45033.440973\n",
       "4      46633.832589\n",
       "5      52477.426306\n",
       "6      53341.747319\n",
       "7      55091.465477\n",
       "8      55091.465477\n",
       "9      59582.917523\n",
       "10     61423.509899\n",
       "11     62352.647026\n",
       "12     62352.647026\n",
       "13     63287.467325\n",
       "14     67080.231957\n",
       "15     70949.981000\n",
       "16     72909.896294\n",
       "17     74884.321575\n",
       "18     80877.084894\n",
       "19     81883.588147\n",
       "20     89970.445587\n",
       "21     93001.652359\n",
       "22    101003.996109\n",
       "23    103952.199275\n",
       "24    108770.218622\n",
       "25    111590.303652\n",
       "26    116146.198447\n",
       "27    117033.009807\n",
       "28    122976.902760\n",
       "29    124581.554019\n",
       "dtype: float64"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred_quad = model_quad.predict(salary_data)\n",
    "predict4 = np.exp(pred_quad)\n",
    "predict4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9798301486401543"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr4= salary_data[\"Salary\"].corr(predict4)\n",
    "corr4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'model4' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-47-3790261dd911>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel4\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresid_pearson\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'o'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxhline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'green'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Obs no.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Std. residual\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'model4' is not defined"
     ]
    }
   ],
   "source": [
    "plt.plot(model4.resid_pearson,'o')\n",
    "plt.axhline(y=0,color='green')\n",
    "plt.xlabel(\"Obs no.\")\n",
    "plt.xlabel(\"Std. residual\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5391.081582693624"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rmse_lin4 = np.sqrt(np.mean((np.array(salary_data[\"Salary\"])-np.array(predict4))**2))\n",
    "rmse_lin4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Salary')"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x=salary_data[\"YearsExperience\"],y=salary_data[\"Salary\"],color='red')\n",
    "plt.plot(salary_data.YearsExperience,predict4,color='blue')\n",
    "plt.xlabel(\"Years of experience\")\n",
    "plt.ylabel(\"Salary\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>RMSE VALUES</th>\n",
       "      <th>R Square</th>\n",
       "      <th>Corr B/W target &amp; pred</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>RMSE_Lin</td>\n",
       "      <td>5592.043609</td>\n",
       "      <td>0.956957</td>\n",
       "      <td>0.978242</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>RMSE_Log</td>\n",
       "      <td>5592.043609</td>\n",
       "      <td>0.853889</td>\n",
       "      <td>0.978242</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>RMSE_exp</td>\n",
       "      <td>7213.235077</td>\n",
       "      <td>0.931967</td>\n",
       "      <td>0.966047</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>RMSE_quad</td>\n",
       "      <td>5391.081583</td>\n",
       "      <td>0.948611</td>\n",
       "      <td>0.979830</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Model  RMSE VALUES  R Square  Corr B/W target & pred\n",
       "0   RMSE_Lin  5592.043609  0.956957                0.978242\n",
       "1   RMSE_Log  5592.043609  0.853889                0.978242\n",
       "2   RMSE_exp  7213.235077  0.931967                0.966047\n",
       "3  RMSE_quad  5391.081583  0.948611                0.979830"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = {\"Model\":pd.Series([\"RMSE_Lin\",\"RMSE_Log\",\"RMSE_exp\",\"RMSE_quad\"]),\n",
    "        \"RMSE VALUES\":pd.Series([rmse_lin1,rmse_lin2,rmse_lin3,rmse_lin4]),\n",
    "        \"R Square\":pd.Series([model1.rsquared,model2.rsquared,model3.rsquared,model_quad.rsquared]),\n",
    "        \"Corr B/W target & pred\": pd.Series([corr1,corr2,corr3,corr4])\n",
    "       }\n",
    "table = pd.DataFrame(data)\n",
    "table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "# the best model with high accuracy and low error is RMSE lin with R square 0.95 and RMSE of 5592"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Delivery Time</th>\n",
       "      <th>Sorting Time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>21.00</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>13.50</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>19.75</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>24.00</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>29.00</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Delivery Time  Sorting Time\n",
       "0          21.00            10\n",
       "1          13.50             4\n",
       "2          19.75             6\n",
       "3          24.00             9\n",
       "4          29.00            10"
      ]
     },
     "execution_count": 170,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "delivery_time = pd.read_csv(\"delivery_time.csv\")\n",
    "delivery_time.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(21, 2)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "delivery_time.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'whiskers': [<matplotlib.lines.Line2D at 0x124a6e160>,\n",
       "  <matplotlib.lines.Line2D at 0x124a6e4c0>],\n",
       " 'caps': [<matplotlib.lines.Line2D at 0x124a6e820>,\n",
       "  <matplotlib.lines.Line2D at 0x124a6eb80>],\n",
       " 'boxes': [<matplotlib.lines.Line2D at 0x124a55dc0>],\n",
       " 'medians': [<matplotlib.lines.Line2D at 0x124a6eee0>],\n",
       " 'fliers': [<matplotlib.lines.Line2D at 0x124a7a280>],\n",
       " 'means': []}"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#boxplot\n",
    "plt.boxplot(delivery_time[\"Delivery Time\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'whiskers': [<matplotlib.lines.Line2D at 0x124b59c10>,\n",
       "  <matplotlib.lines.Line2D at 0x124b59f70>],\n",
       " 'caps': [<matplotlib.lines.Line2D at 0x124b65310>,\n",
       "  <matplotlib.lines.Line2D at 0x124b65670>],\n",
       " 'boxes': [<matplotlib.lines.Line2D at 0x124b598b0>],\n",
       " 'medians': [<matplotlib.lines.Line2D at 0x124b659d0>],\n",
       " 'fliers': [<matplotlib.lines.Line2D at 0x124b65d30>],\n",
       " 'means': []}"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXAAAAD4CAYAAAD1jb0+AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8vihELAAAACXBIWXMAAAsTAAALEwEAmpwYAAAK+klEQVR4nO3dYYhl91nH8d9jEmlTE5tNpqU2HVehBCGQGi7BGgyaNJLW0lbxRQqVKsV5UzQRQfSFRN8piNi3g60NWCOaJigFQ0O1lkITmU3TuulWgrWpaWN3QlbTWrBNeXyxE1k3u3Nn7jk703/284HLzNw59/6fLMs3J+eek1PdHQDG832HPQAAqxFwgEEJOMCgBBxgUAIOMKhLD3Kxa665po8ePXqQSwIM79ixY89299rZzx9owI8ePZqtra2DXBJgeFX11LmedwgFYFACDjAoAQcYlIADDErAAQa1NOBV9aGqOllVx8947khVPVxVT+58verCjgnA2fayB/7hJHec9dxvJ/lEd78xySd2fgbgAC0NeHd/KslzZz39ziT37nx/b5J3zTsWAMuseiHPa7v7mSTp7meq6jXn27CqNpJsJMn6+vqKy8H+VNWBrOP/p89huuAfYnb3ZncvunuxtvaSK0HhgujufT1WeY14c9hWDfjXq+p1SbLz9eR8IwGwF6sG/G+TvHfn+/cm+Zt5xgFgr/ZyGuF9ST6T5Lqqerqq3pfkD5LcXlVPJrl952cADtDSDzG7+93n+dVtM88CwD64EhNgUAIOMCgBBxiUgAMMSsABBiXgAIMScIBBCTjAoAQcYFACDjAoAQcYlIADDErAAQYl4ACDEnCAQQk4wKAmBbyq7qqq41X1RFXdPdNMAOzBygGvquuT/GqSm5LckOTtVfXGuQYDYHdT9sB/LMkj3f2t7n4hyT8m+fl5xgJgmSkBP57klqq6uqouT/K2JG84e6Oq2qiqrara2t7enrAcAGdaOeDdfSLJHyZ5OMlDST6X5IVzbLfZ3YvuXqytra08KAD/36QPMbv7g919Y3ffkuS5JE/OMxYAy1w65cVV9ZruPllV60l+Icmb5xkLgGUmBTzJR6vq6iTfSfL+7j41w0wA7MGkgHf3T801CAD740pMgEEJOMCgBBxgUAIOMCgBBxiUgAMMSsABBiXgAIMScIBBCTjAoAQcYFACDjAoAQcYlIADDErAAQYl4ACDmhTwqvqNqnqiqo5X1X1V9Yq5BgNgdysHvKpen+TXkyy6+/oklyS5c67BANjd1EMolyZ5ZVVdmuTyJF+bPhIAe7FywLv7q0n+KMlXkjyT5L+6++Nnb1dVG1W1VVVb29vbq0/KRevIkSOpqgv6SHLB1zhy5Mgh/0nycjPlEMpVSd6Z5EeS/FCSV1XVe87errs3u3vR3Yu1tbXVJ+WiderUqXT38I9Tp04d9h8lLzNTDqG8Jcm/dfd2d38nyQNJfnKesQBYZkrAv5LkJ6rq8jr936C3JTkxz1gALDPlGPijSe5P8liSf955r82Z5gJgiUunvLi770lyz0yzALAPrsQEGJSAAwxKwAEGJeAAgxJwgEEJOMCgBBxgUAIOMCgBBxiUgAMMSsABBiXgAIMScIBBCTjAoAQcYFBT7ol5XVU9fsbj+aq6e8bZANjFyjd06O5/SfKmJKmqS5J8NcmD84wFwDJzHUK5Lcm/dvdTM70fAEvMFfA7k9x3rl9U1UZVbVXV1vb29kzLATA54FX1/UnekeSvz/X77t7s7kV3L9bW1qYuB8COOfbA35rkse7++gzvBcAezRHwd+c8h08AuHAmBbyqLk9ye5IH5hkHgL1a+TTCJOnubyW5eqZZANgHV2ICDErAAQYl4ACDEnCAQQk4wKAEHGBQAg4wKAEHGJSAAwxKwAEGJeAAgxJwgEEJOMCgBBxgUAIOMCgBBxjU1DvyvLqq7q+qL1bViap681yDAbC7SXfkSfKBJA919y/u3J3+8hlmAmAPVg54VV2Z5JYkv5wk3f3tJN+eZywAlpmyB/6jSbaT/FlV3ZDkWJK7uvu/z9yoqjaSbCTJ+vr6hOW4WPU9Vya/94OHPcZkfc+Vhz0CLzPV3au9sGqR5JEkN3f3o1X1gSTPd/fvnu81i8Wit7a2VpuUi1ZVZdW/p99LXi7/HBy8qjrW3Yuzn5/yIebTSZ7u7kd3fr4/yY0T3g+AfVg54N39H0n+vaqu23nqtiRfmGUqAJaaehbKryX5yM4ZKF9K8ivTRwJgLyYFvLsfT/KS4zIAXHiuxAQYlIADDErAAQYl4ACDEnCAQQk4wKAEHGBQAg4wKAEHGJSAAwxKwAEGJeAAgxJwgEEJOMCgBBxgUAIOMKhJN3Soqi8n+UaS7yZ54Vw33QTgwph6S7Uk+ZnufnaG9wFgHxxCARjU1IB3ko9X1bGq2jjXBlW1UVVbVbW1vb09cTkAXjQ14Dd3941J3prk/VV1y9kbdPdmdy+6e7G2tjZxOQBeNCng3f21na8nkzyY5KY5hgJguZUDXlWvqqorXvw+yc8mOT7XYADsbspZKK9N8mBVvfg+f9HdD80yFQBLrRzw7v5SkhtmnAWAfXAaIcCgBBxgUAIOMCgBBxiUgAMMSsABBiXgAIMScIBBCTjAoAQcYFACDjAoAQcYlIADDErAAQYl4ACDmhzwqrqkqj5bVR+bYyAA9maOPfC7kpyY4X0A2IdJAa+qa5P8XJI/nWccAPZqyj0xk+RPkvxWkivOt0FVbSTZSJL19fWJy3Gx2rn36tCuuuqqwx6Bl5mVA15Vb09ysruPVdVPn2+77t5Mspkki8WiV12Pi1f3hf9rU1UHsg7MacohlJuTvKOqvpzkL5PcWlV/PstUACy1csC7+3e6+9ruPprkziR/393vmW0yAHblPHCAQU39EDNJ0t2fTPLJOd4LgL2xBw4wKAEHGJSAAwxKwAEGJeAAgxJwgEEJOMCgBBxgUAIOMCgBBxiUgAMMSsABBiXgAIMScIBBCTjAoAQcYFArB7yqXlFV/1RVn6uqJ6rq9+ccDIDdTbkjz/8kubW7v1lVlyX5dFX9XXc/MtNsAOxi5YB3dyf55s6Pl+08eo6hAFhu0jHwqrqkqh5PcjLJw9396Dm22aiqrara2t7enrIcAGeYFPDu/m53vynJtUluqqrrz7HNZncvunuxtrY2ZTkAzjDLWSjd/Z85fVf6O+Z4PwCWm3IWylpVvXrn+1cmeUuSL840FwBLTDkL5XVJ7q2qS3L6XwR/1d0fm2csAJaZchbK55P8+IyzALAPrsQEGJSAAwxKwAEGJeAAgxJwgEEJOMCgBBxgUAIOMCgBBxiUgAMMSsABBiXgAIMScIBBCTjAoAQcYFACDjCoKbdUe0NV/UNVnaiqJ6rqrjkHA2B3U26p9kKS3+zux6rqiiTHqurh7v7CTLMBsIuV98C7+5nufmzn+28kOZHk9XMNBsDupuyB/5+qOprT98d89By/20iykSTr6+tzLAdLVdWBvKa79/0amMvkDzGr6geSfDTJ3d39/Nm/7+7N7l5092JtbW3qcrAn3X0gDzhMkwJeVZfldLw/0t0PzDMSAHsx5SyUSvLBJCe6+4/nGwmAvZiyB35zkl9KcmtVPb7zeNtMcwGwxMofYnb3p5Ps/1MfAGbhSkyAQQk4wKAEHGBQAg4wqDrIixGqajvJUwe2IOzdNUmePewh4Dx+uLtfciXkgQYcvldV1VZ3Lw57DtgPh1AABiXgAIMScDht87AHgP1yDBxgUPbAAQYl4ACDEnAualX1oao6WVXHD3sW2C8B52L34SR3HPYQsAoB56LW3Z9K8txhzwGrEHCAQQk4wKAEHGBQAg4wKAHnolZV9yX5TJLrqurpqnrfYc8Ee+VSeoBB2QMHGJSAAwxKwAEGJeAAgxJwgEEJOMCgBBxgUP8LSKhlK3a26pwAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.boxplot(delivery_time[\"Sorting Time\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/lakshmipriya/opt/anaconda3/lib/python3.8/site-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='Density'>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#distplot\n",
    "sns.distplot(delivery_time)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/lakshmipriya/opt/anaconda3/lib/python3.8/site-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Delivery Time', ylabel='Density'>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(delivery_time[\"Delivery Time\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/lakshmipriya/opt/anaconda3/lib/python3.8/site-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Sorting Time', ylabel='Density'>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(delivery_time[\"Sorting Time\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Delivery Time', ylabel='Sorting Time'>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#regplot\n",
    "sns.regplot(x=\"Delivery Time\",y=\"Sorting Time\",data=delivery_time)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Sorting time')"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#scatter pot\n",
    "plt.scatter(x=delivery_time.iloc[:,0],y=delivery_time.iloc[:,1],color='red')\n",
    "plt.xlabel(\"Delivery time\")\n",
    "plt.ylabel(\"Sorting time\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Delivery Time</th>\n",
       "      <th>Sorting Time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>21.00</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>13.50</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>19.75</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>24.00</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>29.00</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Delivery Time  Sorting Time\n",
       "0          21.00            10\n",
       "1          13.50             4\n",
       "2          19.75             6\n",
       "3          24.00             9\n",
       "4          29.00            10"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "delivery_time.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Delivery_time</th>\n",
       "      <th>Sorting_time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>21.00</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>13.50</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>19.75</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>24.00</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>29.00</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Delivery_time  Sorting_time\n",
       "0          21.00            10\n",
       "1          13.50             4\n",
       "2          19.75             6\n",
       "3          24.00             9\n",
       "4          29.00            10"
      ]
     },
     "execution_count": 172,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "delivery_time.columns=['Delivery_time','Sorting_time']\n",
    "delivery_time.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Intercept       6.582734\n",
       "Sorting_time    1.649020\n",
       "dtype: float64"
      ]
     },
     "execution_count": 212,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import statsmodels.formula.api as smf\n",
    "\n",
    "model1 = smf.ols('Delivery_time~Sorting_time',data = delivery_time).fit()\n",
    "model1.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>      <td>Delivery_time</td>  <th>  R-squared:         </th> <td>   0.682</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.666</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   40.80</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Sat, 27 Feb 2021</td> <th>  Prob (F-statistic):</th> <td>3.98e-06</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>20:06:12</td>     <th>  Log-Likelihood:    </th> <td> -51.357</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>    21</td>      <th>  AIC:               </th> <td>   106.7</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>    19</td>      <th>  BIC:               </th> <td>   108.8</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "        <td></td>          <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>    <td>    6.5827</td> <td>    1.722</td> <td>    3.823</td> <td> 0.001</td> <td>    2.979</td> <td>   10.186</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Sorting_time</th> <td>    1.6490</td> <td>    0.258</td> <td>    6.387</td> <td> 0.000</td> <td>    1.109</td> <td>    2.189</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 3.649</td> <th>  Durbin-Watson:     </th> <td>   1.248</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.161</td> <th>  Jarque-Bera (JB):  </th> <td>   2.086</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.750</td> <th>  Prob(JB):          </th> <td>   0.352</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 3.367</td> <th>  Cond. No.          </th> <td>    18.3</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:          Delivery_time   R-squared:                       0.682\n",
       "Model:                            OLS   Adj. R-squared:                  0.666\n",
       "Method:                 Least Squares   F-statistic:                     40.80\n",
       "Date:                Sat, 27 Feb 2021   Prob (F-statistic):           3.98e-06\n",
       "Time:                        20:06:12   Log-Likelihood:                -51.357\n",
       "No. Observations:                  21   AIC:                             106.7\n",
       "Df Residuals:                      19   BIC:                             108.8\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "================================================================================\n",
       "                   coef    std err          t      P>|t|      [0.025      0.975]\n",
       "--------------------------------------------------------------------------------\n",
       "Intercept        6.5827      1.722      3.823      0.001       2.979      10.186\n",
       "Sorting_time     1.6490      0.258      6.387      0.000       1.109       2.189\n",
       "==============================================================================\n",
       "Omnibus:                        3.649   Durbin-Watson:                   1.248\n",
       "Prob(Omnibus):                  0.161   Jarque-Bera (JB):                2.086\n",
       "Skew:                           0.750   Prob(JB):                        0.352\n",
       "Kurtosis:                       3.367   Cond. No.                         18.3\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 213,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model1.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Intercept</th>\n",
       "      <td>2.979134</td>\n",
       "      <td>10.186334</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sorting_time</th>\n",
       "      <td>1.108673</td>\n",
       "      <td>2.189367</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     0          1\n",
       "Intercept     2.979134  10.186334\n",
       "Sorting_time  1.108673   2.189367"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model1.conf_int(0.05)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-0.70630355,  0.10943679,  1.11524837,  0.87774154,  2.01950985,\n",
       "       -0.383949  ,  0.2978383 , -0.69160484, -1.76255624, -0.9110735 ,\n",
       "        0.01877637, -0.82756157, -0.49264758, -0.0101515 ,  0.17043364,\n",
       "        0.5796396 , -0.92911167, -0.00540844, -0.64082979, -0.10081191,\n",
       "        2.27338512])"
      ]
     },
     "execution_count": 214,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model1.resid\n",
    "model1.resid_pearson"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     23.072933\n",
       "1     13.178814\n",
       "2     16.476853\n",
       "3     21.423913\n",
       "4     23.072933\n",
       "5     16.476853\n",
       "6     18.125873\n",
       "7     11.529794\n",
       "8     23.072933\n",
       "9     21.423913\n",
       "10    19.774893\n",
       "11    13.178814\n",
       "12    18.125873\n",
       "13    11.529794\n",
       "14    11.529794\n",
       "15    13.178814\n",
       "16    16.476853\n",
       "17    18.125873\n",
       "18     9.880774\n",
       "19    18.125873\n",
       "20    14.827833\n",
       "dtype: float64"
      ]
     },
     "execution_count": 215,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predict1 = model1.predict(delivery_time.iloc[:,1])\n",
    "predict1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.7916503270617654"
      ]
     },
     "execution_count": 216,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rmse_lin=np.sqrt(np.mean((np.array(delivery_time[\"Delivery_time\"])-np.array(predict1))**2))\n",
    "rmse_lin"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Delivery time')"
      ]
     },
     "execution_count": 217,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x=delivery_time[\"Sorting_time\"],y=delivery_time[\"Delivery_time\"],color='red')\n",
    "plt.plot(delivery_time[\"Sorting_time\"],predict1,color='black')\n",
    "plt.xlabel(\"Sorting Time\")\n",
    "plt.ylabel(\"Delivery time\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8259972607955325"
      ]
     },
     "execution_count": 218,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr_1 = delivery_time[\"Delivery_time\"].corr(predict1)\n",
    "corr_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Std. residual')"
      ]
     },
     "execution_count": 219,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(model1.resid_pearson,'o')\n",
    "plt.axhline(y=0,color='green')\n",
    "plt.xlabel(\"Observed no.\")\n",
    "plt.ylabel(\"Std. residual\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# problem 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Delivery Time</th>\n",
       "      <th>Sorting Time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>21.00</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>13.50</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>19.75</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>24.00</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>29.00</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Delivery Time  Sorting Time\n",
       "0          21.00            10\n",
       "1          13.50             4\n",
       "2          19.75             6\n",
       "3          24.00             9\n",
       "4          29.00            10"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "delivery_time=pd.read_csv(\"delivery_time.csv\")\n",
    "delivery_time.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Delivery_time</th>\n",
       "      <th>Sorting_time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>21.00</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>13.50</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>19.75</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>24.00</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>29.00</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Delivery_time  Sorting_time\n",
       "0          21.00            10\n",
       "1          13.50             4\n",
       "2          19.75             6\n",
       "3          24.00             9\n",
       "4          29.00            10"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "delivery_time.columns=[\"Delivery_time\",\"Sorting_time\"]\n",
    "delivery_time.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "import statsmodels.formula.api as smf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>      <td>Delivery_time</td>  <th>  R-squared:         </th> <td>   0.682</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.666</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   40.80</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Sun, 23 May 2021</td> <th>  Prob (F-statistic):</th> <td>3.98e-06</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>23:02:20</td>     <th>  Log-Likelihood:    </th> <td> -51.357</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>    21</td>      <th>  AIC:               </th> <td>   106.7</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>    19</td>      <th>  BIC:               </th> <td>   108.8</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "        <td></td>          <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>    <td>    6.5827</td> <td>    1.722</td> <td>    3.823</td> <td> 0.001</td> <td>    2.979</td> <td>   10.186</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Sorting_time</th> <td>    1.6490</td> <td>    0.258</td> <td>    6.387</td> <td> 0.000</td> <td>    1.109</td> <td>    2.189</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 3.649</td> <th>  Durbin-Watson:     </th> <td>   1.248</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.161</td> <th>  Jarque-Bera (JB):  </th> <td>   2.086</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.750</td> <th>  Prob(JB):          </th> <td>   0.352</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 3.367</td> <th>  Cond. No.          </th> <td>    18.3</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:          Delivery_time   R-squared:                       0.682\n",
       "Model:                            OLS   Adj. R-squared:                  0.666\n",
       "Method:                 Least Squares   F-statistic:                     40.80\n",
       "Date:                Sun, 23 May 2021   Prob (F-statistic):           3.98e-06\n",
       "Time:                        23:02:20   Log-Likelihood:                -51.357\n",
       "No. Observations:                  21   AIC:                             106.7\n",
       "Df Residuals:                      19   BIC:                             108.8\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "================================================================================\n",
       "                   coef    std err          t      P>|t|      [0.025      0.975]\n",
       "--------------------------------------------------------------------------------\n",
       "Intercept        6.5827      1.722      3.823      0.001       2.979      10.186\n",
       "Sorting_time     1.6490      0.258      6.387      0.000       1.109       2.189\n",
       "==============================================================================\n",
       "Omnibus:                        3.649   Durbin-Watson:                   1.248\n",
       "Prob(Omnibus):                  0.161   Jarque-Bera (JB):                2.086\n",
       "Skew:                           0.750   Prob(JB):                        0.352\n",
       "Kurtosis:                       3.367   Cond. No.                         18.3\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model1=smf.ols('Delivery_time~Sorting_time',data=delivery_time).fit()\n",
    "model1.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "predict1 = model1.predict(delivery_time[\"Sorting_time\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [],
   "source": [
    "rmse_lin = np.sqrt(np.mean((np.array(delivery_time[\"Delivery_time\"])-np.array(predict1))**2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.7916503270617654"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rmse_lin"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x11ac29fa0>]"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x=delivery_time[\"Sorting_time\"],y=delivery_time[\"Delivery_time\"],color='black')\n",
    "plt.plot(delivery_time[\"Sorting_time\"],predict1,color='green')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [],
   "source": [
    "corr_1=predict1.corr(delivery_time[\"Delivery_time\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Intercept               1.159684\n",
       "np.log(Sorting_time)    9.043413\n",
       "dtype: float64"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model2 = smf.ols('Delivery_time~np.log(Sorting_time)',data=delivery_time).fit()\n",
    "model2.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>      <td>Delivery_time</td>  <th>  R-squared:         </th> <td>   0.695</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.679</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   43.39</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Sun, 23 May 2021</td> <th>  Prob (F-statistic):</th> <td>2.64e-06</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>22:59:46</td>     <th>  Log-Likelihood:    </th> <td> -50.912</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>    21</td>      <th>  AIC:               </th> <td>   105.8</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>    19</td>      <th>  BIC:               </th> <td>   107.9</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "            <td></td>              <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>            <td>    1.1597</td> <td>    2.455</td> <td>    0.472</td> <td> 0.642</td> <td>   -3.978</td> <td>    6.297</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>np.log(Sorting_time)</th> <td>    9.0434</td> <td>    1.373</td> <td>    6.587</td> <td> 0.000</td> <td>    6.170</td> <td>   11.917</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 5.552</td> <th>  Durbin-Watson:     </th> <td>   1.427</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.062</td> <th>  Jarque-Bera (JB):  </th> <td>   3.481</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.946</td> <th>  Prob(JB):          </th> <td>   0.175</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 3.628</td> <th>  Cond. No.          </th> <td>    9.08</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:          Delivery_time   R-squared:                       0.695\n",
       "Model:                            OLS   Adj. R-squared:                  0.679\n",
       "Method:                 Least Squares   F-statistic:                     43.39\n",
       "Date:                Sun, 23 May 2021   Prob (F-statistic):           2.64e-06\n",
       "Time:                        22:59:46   Log-Likelihood:                -50.912\n",
       "No. Observations:                  21   AIC:                             105.8\n",
       "Df Residuals:                      19   BIC:                             107.9\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "========================================================================================\n",
       "                           coef    std err          t      P>|t|      [0.025      0.975]\n",
       "----------------------------------------------------------------------------------------\n",
       "Intercept                1.1597      2.455      0.472      0.642      -3.978       6.297\n",
       "np.log(Sorting_time)     9.0434      1.373      6.587      0.000       6.170      11.917\n",
       "==============================================================================\n",
       "Omnibus:                        5.552   Durbin-Watson:                   1.427\n",
       "Prob(Omnibus):                  0.062   Jarque-Bera (JB):                3.481\n",
       "Skew:                           0.946   Prob(JB):                        0.175\n",
       "Kurtosis:                       3.628   Cond. No.                         9.08\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model2.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Intercept</th>\n",
       "      <td>-3.97778</td>\n",
       "      <td>6.297147</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>np.log(Sorting_time)</th>\n",
       "      <td>6.16977</td>\n",
       "      <td>11.917057</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            0          1\n",
       "Intercept            -3.97778   6.297147\n",
       "np.log(Sorting_time)  6.16977  11.917057"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model2.conf_int(0.05)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-0.34207012, -0.06839109,  0.83061001,  1.0335774 ,  2.44206469,\n",
       "       -0.70066414,  0.08444506, -0.55504813, -1.42092236, -0.79351107,\n",
       "       -0.046959  , -1.02543743, -0.72295404,  0.14098557,  0.3254345 ,\n",
       "        0.41187217, -1.2574911 , -0.22528994,  0.19903082, -0.32273466,\n",
       "        2.01345289])"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model2.resid\n",
    "model2.resid_pearson"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     21.982913\n",
       "1     13.696517\n",
       "2     17.363305\n",
       "3     21.030094\n",
       "4     21.982913\n",
       "5     17.363305\n",
       "6     18.757354\n",
       "7     11.094889\n",
       "8     21.982913\n",
       "9     21.030094\n",
       "10    19.964933\n",
       "11    13.696517\n",
       "12    18.757354\n",
       "13    11.094889\n",
       "14    11.094889\n",
       "15    13.696517\n",
       "16    17.363305\n",
       "17    18.757354\n",
       "18     7.428100\n",
       "19    18.757354\n",
       "20    15.714496\n",
       "dtype: float64"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predict2 = model2.predict(delivery_time[\"Sorting_time\"])\n",
    "predict2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.733171476682066"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rmse_log = np.sqrt(np.mean((np.array(delivery_time[\"Delivery_time\"])-np.array(predict2))**2))\n",
    "rmse_log"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Delivery time')"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x=delivery_time[\"Sorting_time\"],y=delivery_time[\"Delivery_time\"],color='green')\n",
    "plt.plot(delivery_time[\"Sorting_time\"],predict2,color='blue')\n",
    "plt.xlabel(\"Sorting time\")\n",
    "plt.ylabel(\"Delivery time\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8339325279256244"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr_2 = delivery_time[\"Delivery_time\"].corr(predict2)\n",
    "corr_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Std. residual')"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(model2.resid_pearson,'o')\n",
    "plt.axhline(y=0,color='red')\n",
    "plt.xlabel(\"obs. no.\")\n",
    "plt.ylabel(\"Std. residual\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Intercept       2.121372\n",
       "Sorting_time    0.105552\n",
       "dtype: float64"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import statsmodels.formula.api as smf\n",
    "model3 = smf.ols('np.log(Delivery_time)~Sorting_time',data=delivery_time).fit()\n",
    "model3.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>    <td>np.log(Delivery_time)</td> <th>  R-squared:         </th> <td>   0.711</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                     <td>OLS</td>          <th>  Adj. R-squared:    </th> <td>   0.696</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>               <td>Least Squares</td>     <th>  F-statistic:       </th> <td>   46.73</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>               <td>Sun, 23 May 2021</td>    <th>  Prob (F-statistic):</th> <td>1.59e-06</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                   <td>22:59:52</td>        <th>  Log-Likelihood:    </th> <td>  7.7920</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>        <td>    21</td>         <th>  AIC:               </th> <td>  -11.58</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>            <td>    19</td>         <th>  BIC:               </th> <td>  -9.495</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>                <td>     1</td>         <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>        <td>nonrobust</td>       <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "        <td></td>          <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>    <td>    2.1214</td> <td>    0.103</td> <td>   20.601</td> <td> 0.000</td> <td>    1.906</td> <td>    2.337</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Sorting_time</th> <td>    0.1056</td> <td>    0.015</td> <td>    6.836</td> <td> 0.000</td> <td>    0.073</td> <td>    0.138</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 1.238</td> <th>  Durbin-Watson:     </th> <td>   1.325</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.538</td> <th>  Jarque-Bera (JB):  </th> <td>   0.544</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.393</td> <th>  Prob(JB):          </th> <td>   0.762</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 3.067</td> <th>  Cond. No.          </th> <td>    18.3</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                              OLS Regression Results                             \n",
       "=================================================================================\n",
       "Dep. Variable:     np.log(Delivery_time)   R-squared:                       0.711\n",
       "Model:                               OLS   Adj. R-squared:                  0.696\n",
       "Method:                    Least Squares   F-statistic:                     46.73\n",
       "Date:                   Sun, 23 May 2021   Prob (F-statistic):           1.59e-06\n",
       "Time:                           22:59:52   Log-Likelihood:                 7.7920\n",
       "No. Observations:                     21   AIC:                            -11.58\n",
       "Df Residuals:                         19   BIC:                            -9.495\n",
       "Df Model:                              1                                         \n",
       "Covariance Type:               nonrobust                                         \n",
       "================================================================================\n",
       "                   coef    std err          t      P>|t|      [0.025      0.975]\n",
       "--------------------------------------------------------------------------------\n",
       "Intercept        2.1214      0.103     20.601      0.000       1.906       2.337\n",
       "Sorting_time     0.1056      0.015      6.836      0.000       0.073       0.138\n",
       "==============================================================================\n",
       "Omnibus:                        1.238   Durbin-Watson:                   1.325\n",
       "Prob(Omnibus):                  0.538   Jarque-Bera (JB):                0.544\n",
       "Skew:                           0.393   Prob(JB):                        0.762\n",
       "Kurtosis:                       3.067   Cond. No.                         18.3\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model3.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-0.75408795,  0.33675889,  1.3016092 ,  0.60797197,  1.08475764,\n",
       "       -0.13425573,  0.47972269, -1.06383166, -1.66402537, -0.79839415,\n",
       "        0.12198057, -0.9609301 , -0.26219179,  0.02461332,  0.28130094,\n",
       "        0.89124014, -0.7613643 ,  0.20640995, -1.44153627,  0.11763994,\n",
       "        2.38661208])"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model3.resid\n",
    "model3.resid_pearson"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     23.972032\n",
       "1     12.725123\n",
       "2     15.716034\n",
       "3     21.570707\n",
       "4     23.972032\n",
       "5     15.716034\n",
       "6     17.465597\n",
       "7     11.450423\n",
       "8     23.972032\n",
       "9     21.570707\n",
       "10    19.409927\n",
       "11    12.725123\n",
       "12    17.465597\n",
       "13    11.450423\n",
       "14    11.450423\n",
       "15    12.725123\n",
       "16    15.716034\n",
       "17    17.465597\n",
       "18    10.303411\n",
       "19    17.465597\n",
       "20    14.141728\n",
       "dtype: float64"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred_exp=model3.predict(delivery_time[\"Sorting_time\"])\n",
    "predict3=np.exp(pred_exp)\n",
    "predict3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.940250323056201"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rmse_exp = np.sqrt(np.mean((np.array(delivery_time[\"Delivery_time\"])-np.array(predict3))**2))\n",
    "rmse_exp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Delivery time')"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x=delivery_time.Sorting_time,y=delivery_time[\"Delivery_time\"],color='blue')\n",
    "plt.plot(delivery_time[\"Sorting_time\"],predict3,color='red')\n",
    "plt.xlabel(\"Sorting time\")\n",
    "plt.ylabel(\"Delivery time\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.808578010828926"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr_3 = delivery_time[\"Delivery_time\"].corr(predict3)\n",
    "corr_3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'standard residual')"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(model3.resid_pearson,'o')\n",
    "plt.axhline(y=0,color='black')\n",
    "plt.xlabel(\"Observed no.\")\n",
    "plt.ylabel(\"standard residual\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "import statsmodels.formula.api as smf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Delivery_time</th>\n",
       "      <th>Sorting_time</th>\n",
       "      <th>Sorting_sqr</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>21.00</td>\n",
       "      <td>10</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>13.50</td>\n",
       "      <td>4</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>19.75</td>\n",
       "      <td>6</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>24.00</td>\n",
       "      <td>9</td>\n",
       "      <td>81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>29.00</td>\n",
       "      <td>10</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Delivery_time  Sorting_time  Sorting_sqr\n",
       "0          21.00            10          100\n",
       "1          13.50             4           16\n",
       "2          19.75             6           36\n",
       "3          24.00             9           81\n",
       "4          29.00            10          100"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "delivery_time[\"Sorting_sqr\"]=delivery_time[\"Sorting_time\"]*delivery_time[\"Sorting_time\"]\n",
    "delivery_time.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Intercept       1.699704\n",
       "Sorting_time    0.265922\n",
       "Sorting_sqr    -0.012841\n",
       "dtype: float64"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model4=smf.ols('np.log(Delivery_time)~Sorting_time+Sorting_sqr',data=delivery_time).fit()\n",
    "model4.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>    <td>np.log(Delivery_time)</td> <th>  R-squared:         </th> <td>   0.765</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                     <td>OLS</td>          <th>  Adj. R-squared:    </th> <td>   0.739</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>               <td>Least Squares</td>     <th>  F-statistic:       </th> <td>   29.28</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>               <td>Sun, 23 May 2021</td>    <th>  Prob (F-statistic):</th> <td>2.20e-06</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                   <td>22:59:54</td>        <th>  Log-Likelihood:    </th> <td>  9.9597</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>        <td>    21</td>         <th>  AIC:               </th> <td>  -13.92</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>            <td>    18</td>         <th>  BIC:               </th> <td>  -10.79</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>                <td>     2</td>         <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>        <td>nonrobust</td>       <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "        <td></td>          <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>    <td>    1.6997</td> <td>    0.228</td> <td>    7.441</td> <td> 0.000</td> <td>    1.220</td> <td>    2.180</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Sorting_time</th> <td>    0.2659</td> <td>    0.080</td> <td>    3.315</td> <td> 0.004</td> <td>    0.097</td> <td>    0.434</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Sorting_sqr</th>  <td>   -0.0128</td> <td>    0.006</td> <td>   -2.032</td> <td> 0.057</td> <td>   -0.026</td> <td>    0.000</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 2.548</td> <th>  Durbin-Watson:     </th> <td>   1.369</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.280</td> <th>  Jarque-Bera (JB):  </th> <td>   1.777</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.708</td> <th>  Prob(JB):          </th> <td>   0.411</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 2.846</td> <th>  Cond. No.          </th> <td>    373.</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                              OLS Regression Results                             \n",
       "=================================================================================\n",
       "Dep. Variable:     np.log(Delivery_time)   R-squared:                       0.765\n",
       "Model:                               OLS   Adj. R-squared:                  0.739\n",
       "Method:                    Least Squares   F-statistic:                     29.28\n",
       "Date:                   Sun, 23 May 2021   Prob (F-statistic):           2.20e-06\n",
       "Time:                           22:59:54   Log-Likelihood:                 9.9597\n",
       "No. Observations:                     21   AIC:                            -13.92\n",
       "Df Residuals:                         18   BIC:                            -10.79\n",
       "Df Model:                              2                                         \n",
       "Covariance Type:               nonrobust                                         \n",
       "================================================================================\n",
       "                   coef    std err          t      P>|t|      [0.025      0.975]\n",
       "--------------------------------------------------------------------------------\n",
       "Intercept        1.6997      0.228      7.441      0.000       1.220       2.180\n",
       "Sorting_time     0.2659      0.080      3.315      0.004       0.097       0.434\n",
       "Sorting_sqr     -0.0128      0.006     -2.032      0.057      -0.026       0.000\n",
       "==============================================================================\n",
       "Omnibus:                        2.548   Durbin-Watson:                   1.369\n",
       "Prob(Omnibus):                  0.280   Jarque-Bera (JB):                1.777\n",
       "Skew:                           0.708   Prob(JB):                        0.411\n",
       "Kurtosis:                       2.846   Cond. No.                         373.\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model4.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-0.18653701,  0.27510944,  0.92331151,  0.76937448,  1.79789238,\n",
       "       -0.62623272,  0.0766711 , -0.80301506, -1.16851536, -0.74833548,\n",
       "       -0.11118848, -1.12531927, -0.72398172,  0.37160353,  0.64861345,\n",
       "        0.8734897 , -1.3029903 , -0.21828016, -0.61938087, -0.31407821,\n",
       "        2.21178906])"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model4.resid\n",
    "model4.resid_pearson"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     3.074863\n",
       "1     2.557942\n",
       "2     2.832974\n",
       "3     3.052913\n",
       "4     3.074863\n",
       "5     2.832974\n",
       "6     2.931968\n",
       "7     2.381905\n",
       "8     3.074863\n",
       "9     3.052913\n",
       "10    3.005281\n",
       "11    2.557942\n",
       "12    2.931968\n",
       "13    2.381905\n",
       "14    2.381905\n",
       "15    2.557942\n",
       "16    2.832974\n",
       "17    2.931968\n",
       "18    2.180186\n",
       "19    2.931968\n",
       "20    2.708299\n",
       "dtype: float64"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predict_quad=model4.predict(delivery_time)\n",
    "predict_quad"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     21.646921\n",
       "1     12.909227\n",
       "2     16.995933\n",
       "3     21.176938\n",
       "4     21.646921\n",
       "5     16.995933\n",
       "6     18.764526\n",
       "7     10.825502\n",
       "8     21.646921\n",
       "9     21.176938\n",
       "10    20.191891\n",
       "11    12.909227\n",
       "12    18.764526\n",
       "13    10.825502\n",
       "14    10.825502\n",
       "15    12.909227\n",
       "16    16.995933\n",
       "17    18.764526\n",
       "18     8.847949\n",
       "19    18.764526\n",
       "20    15.003730\n",
       "dtype: float64"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predict4=np.exp(predict_quad)\n",
    "predict4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.799041988740925"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rmse_quad = np.sqrt(np.mean((np.array(delivery_time[\"Delivery_time\"])-np.array(predict4))**2))\n",
    "rmse_quad"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Delivery time')"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x=delivery_time.Sorting_time,y=delivery_time[\"Delivery_time\"],color='green')\n",
    "plt.plot(delivery_time[\"Sorting_time\"],predict4,color='blue')\n",
    "plt.xlabel(\"Sorting time\")\n",
    "plt.ylabel(\"Delivery time\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8258882749910931"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr_4 = delivery_time[\"Delivery_time\"].corr(predict4)\n",
    "corr_4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Standard residual')"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(model4.resid_pearson,'o')\n",
    "plt.axhline(y=0,color='green')\n",
    "plt.xlabel(\"Observed number\")\n",
    "plt.ylabel(\"Standard residual\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>RMSE values</th>\n",
       "      <th>R_squared</th>\n",
       "      <th>Corr B/W target &amp; Pred</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Linear</td>\n",
       "      <td>2.791650</td>\n",
       "      <td>0.682271</td>\n",
       "      <td>0.825997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Log</td>\n",
       "      <td>2.733171</td>\n",
       "      <td>0.695443</td>\n",
       "      <td>0.833933</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Exponential</td>\n",
       "      <td>2.940250</td>\n",
       "      <td>0.710948</td>\n",
       "      <td>0.808578</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Quadratic</td>\n",
       "      <td>2.799042</td>\n",
       "      <td>0.764867</td>\n",
       "      <td>0.825888</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Model  RMSE values  R_squared  Corr B/W target & Pred\n",
       "0       Linear     2.791650   0.682271                0.825997\n",
       "1          Log     2.733171   0.695443                0.833933\n",
       "2  Exponential     2.940250   0.710948                0.808578\n",
       "3    Quadratic     2.799042   0.764867                0.825888"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data2 = {\"Model\":pd.Series(['Linear','Log','Exponential','Quadratic']),\n",
    "         \"RMSE values\":pd.Series([rmse_lin,rmse_log,rmse_exp,rmse_quad]),\n",
    "         \"R_squared\":pd.Series([model1.rsquared,model2.rsquared,model3.rsquared,model4.rsquared]),\n",
    "         \"Corr B/W target & Pred\": pd.Series([corr_1,corr_2,corr_3,corr_4])\n",
    "        }\n",
    "table2 = pd.DataFrame(data2)\n",
    "table2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 258,
   "metadata": {},
   "outputs": [],
   "source": [
    "# the best model is the quadratic model with R_square as 76% and error- RMSE as 2.799"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
